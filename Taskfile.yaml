---
version: "3"

interval: 500ms

# NOTE: after setting up all envs, use task file for development.
# INFO: script commands are os and terminal specific

tasks:
  i:
    desc: install all dependencies for project
    cmds:
      - cd backend/nodejs && npm run install
      - cd backend/golang && task i
      - cd frontend && npm run install

  build:
    desc: builds the project
    cmds:
      - cd backend/nodejs && npm run build
      - cd backend/golang && task build
      - cd frontend && npm run build

  create-networks:
    desc: create proxy (external) and talkverse-backend-proxy (internal) networks
      cmd:
      # Windows (Git Bash)
      bash ./task_scripts/create_docker_networks.sh

  kafka-development:
    desc: start the Kafka container for development
    cmd:
      # Windows (Git Bash)
      bash ./task_scripts/talkverse_kafka_development.sh

  create-topics-development:
    desc: create topics for kafka from ./task_scripts/create_kafka_topics_development.sh
    vars:
      KAFKA_CONTAINER: "talkverse-kafka-development" # Dynamically defined container name
    cmd:
      # Windows (Git Bash)
      bash ./task_scripts/create_kafka_topics.sh "{{.KAFKA_CONTAINER}}"

  create-topics:
    desc: create topics for kafka from ./task_scripts/create_kafka_topics.sh
    vars:
      KAFKA_CONTAINER: "talkverse-kafka" # Dynamically defined container name
    cmd:
      # Windows (Git Bash)
      bash ./task_scripts/create_kafka_topics.sh "{{.KAFKA_CONTAINER}}"

  dev:
    desc: start all development servers concurrently (backend and frontend)
    cmds:
      - task: dev-kafka
      - npm run conc

  dev-kafka:
    desc: start kafka-development and golang server for consuming kafka messages
    cmds:
      - task: kafka-development
      - task: create-topics-development

  golang:
    desc: start golang server from backend services (kafka should be running)
    cmds:
      - cd backend/golang && task run

  nodejs:
    desc: start nodejs server from backend services (kafka should be running)
    cmds:
      - cd backend/nodejs && npm run dev

  client:
    desc: start reactjs server from frontend services (backend services should be running)
    cmds:
      - cd frontend && npm run dev

  compose-up-backend:
    desc: start backend services using Docker Compose - databases, kafka, servers
    cmds:
      - task: create-networks
      - docker-compose -f ./backend/databases/docker-compose up -d
      - docker-compose -f ./backend/kafka/docker-compose up -d
      - task: create-topics
      - docker-compose -f ./backend/golang/docker-compose up -d
      - docker-compose -f ./backend/nodejs/docker-compose up -d

  compose-down-backend:
    desc: stop backend services using Docker Compose - databases, kafka, servers
    cmds:
      - docker-compose -f ./backend/nodejs/docker-compose down
      - docker-compose -f ./backend/golang/docker-compose down
      - docker-compose -f ./backend/kafka/docker-compose down
      - docker-compose -f ./backend/databases/docker-compose down

  compose-up-frontend:
    desc: start frontend services using Docker Compose
    cmds:
      - docker-compose -f ./frontend/docker-compose.yml up -d

  compose-down-frontend:
    desc: stop frontend services using Docker Compose
    cmds:
      - docker-compose -f ./frontend/docker-compose.yml down

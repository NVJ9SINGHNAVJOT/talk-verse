---
version: "3"

interval: 500ms

# NOTE: after setting up all envs, use task file for development.
# INFO: script commands are OS and terminal specific

tasks:
  default:
    desc: List all tasks.
    cmd: task -l

  i:
    desc: Install all necessary dependencies for the project across backend and frontend services.
    cmds:
      - cd backend/nodejs && npm install
      - cd backend/golang && go mod download && go mod verify
      - cd frontend && npm install

  format:
    desc: Format code across backend (Node.js, Go) and frontend using predefined standards.
    cmds:
      - cd backend/nodejs && npm run prettier-write
      - cd backend/golang && gofmt -s -w .
      - cd frontend && npm run prettier-write

  build:
    desc: Build the backend (Node.js, Go) and frontend for local development and production readiness.
    cmds:
      - cd backend/nodejs && npm run build
      - cd backend/golang && go build -o ./dist/main main.go
      - cd frontend && npm run build

  proxy:
    desc: Create a Docker network proxy to enable communication between containers.
    cmd:
      # Windows (Git Bash)
      cd task_scripts && bash docker_proxy_network.sh

  create-networks:
    desc: Create necessary Docker networks, both external (proxy) and internal (backend).
    cmds:
      - task: proxy
      # Windows (Git Bash)
      - cd task_scripts && bash this_create_docker_networks.sh

  dev-kafka-topics:
    desc: Create Kafka topics for development using a script to define topic configurations.
    cmd:
      # Windows (Git Bash)
      cd task_scripts && bash this_create_kafka_topics.sh "talkverse-kafka-development" "1"

  dev-kafka:
    desc: Start a development instance of Kafka with networking configured for development.
    cmds:
      - task: proxy
      # Windows (Git Bash)
      - cd task_scripts && bash create_kafka_development_container.sh "talkverse-kafka-development" "proxy"

  scripts:
    desc: Clone utility scripts from the specified GitHub repository to support development tasks.
    cmd:
      # Windows (Git Bash)
      bash clone_files.sh

  dev:
    desc: Run backend and frontend servers concurrently for local development.
    cmds:
      - task: dev-kafka
      - task: dev-kafka-topics
      - npm run conc

  golang:
    desc: Start the Go backend service (ensure Kafka is running before this).
    cmds:
      - cd backend/golang && go run main.go

  nodejs:
    desc: Start the Node.js backend service (ensure Kafka is running before this).
    cmds:
      - cd backend/nodejs && npm run dev

  client:
    desc: Start the React.js frontend service, ensuring backend services are up and running.
    cmds:
      - cd frontend && npm run dev

  k-cluster:
    desc: Display detailed information about the Kafka broker cluster, including status and replication.
    cmds:
      - cd backend/kafka && docker-compose exec talkverse-kafka-0 kafka-metadata-quorum.sh --bootstrap-server talkverse-kafka-0:9092 describe --status
      - cd backend/kafka && docker-compose exec talkverse-kafka-0 kafka-metadata-quorum.sh --bootstrap-server talkverse-kafka-0:9092 describe --replication

  kafka-topics:
    desc: Create Kafka topics for production, with customizable partition settings as needed.
    env:
      MESSAGE_PARTITIONS: 100
      GPMESSAGE_PARTITIONS: 100
      UNSEENCOUNT_PARTITIONS: 100
    cmds:
      # Windows (Git Bash)
      - cd task_scripts && bash this_create_kafka_topics.sh "talkverse-kafka-0" "3"

  compose-up-backend:
    desc: Start all backend services using Docker Compose, including databases, Kafka, and app servers.
    cmds:
      - task: create-networks
      - docker-compose -f ./backend/databases/docker-compose.yml up -d
      - docker-compose -f ./backend/kafka/docker-compose.yml up -d
      - sleep 10 # Wait for 10 seconds to ensure brokers are ready
      - task: kafka-topics
      - docker-compose -f ./backend/golang/docker-compose.yml up -d
      - docker-compose -f ./backend/nodejs/docker-compose.yml up -d

  compose-down-backend:
    desc: Shut down all backend services using Docker Compose, including databases, Kafka, and app servers.
    cmds:
      - docker-compose -f ./backend/nodejs/docker-compose.yml down
      - docker-compose -f ./backend/golang/docker-compose.yml down
      - docker-compose -f ./backend/kafka/docker-compose.yml down
      - docker-compose -f ./backend/databases/docker-compose.yml down

  compose-up-frontend:
    desc: Start all frontend services using Docker Compose.
    cmds:
      - docker-compose -f ./frontend/docker-compose.yml up -d

  compose-down-frontend:
    desc: Shut down all frontend services using Docker Compose.
    cmds:
      - docker-compose -f ./frontend/docker-compose.yml down

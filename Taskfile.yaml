---
version: "3"

interval: 500ms

# NOTE: after setting up all envs, use task file for development.
# INFO: script commands are os and terminal specific

tasks:
  i:
    desc: install all dependencies for project
    cmds:
      - cd backend/nodejs && npm install
      - cd backend/golang && go mod download && go mod verify
      - cd frontend && npm install

  format:
    desc: format all code for frontend, backend
    cmds:
      - cd backend/nodejs && npm run prettier-write
      - cd backend/golang && gofmt -s -w .
      - cd frontend && npm run prettier-write

  build:
    desc: builds the project locally
    cmds:
      - cd backend/nodejs && npm run build
      - cd backend/golang && go build -o ./dist/main main.go
      - cd frontend && npm run build

  proxy:
    desc: create proxy external network for docker
    cmd:
      # Windows (Git Bash)
      bash ./task_scripts/docker_proxy_network.sh

  create-networks:
    desc: create proxy (external) and talkverse-backend-proxy (internal) networks
    cmds:
      - task: proxy
      # Windows (Git Bash)
      - bash ./task_scripts/this_create_docker_networks.sh

  dev-kafka-topics:
    desc: create topics for kafka development container from ./task_scripts/this_create_kafka_topics.sh
    cmd:
      # Windows (Git Bash)
      bash ./task_scripts/this_create_kafka_topics.sh "talkverse-kafka-development" "1"

  dev-kafka:
    desc: start the Kafka container for development
    cmds:
      - task: proxy
      # Windows (Git Bash)
      - bash ./task_scripts/create_kafka_development_container.sh "talkverse-kafka-development" "proxy"

  scripts:
    desc: clone scripts from -> https://github.com/NVJ9SINGHNAVJOT/stacks
    cmd:
      # Windows (Git Bash)
      bash ./clone_files.sh

  dev:
    desc: start all development servers concurrently (backend and frontend)
    cmds:
      - task: dev-kafka
      - task: dev-kafka-topics
      - npm run conc

  golang:
    desc: start golang server from backend services (kafka should be running)
    cmds:
      - cd backend/golang && go run main.go

  nodejs:
    desc: start nodejs server from backend services (kafka should be running)
    cmds:
      - cd backend/nodejs && npm run dev

  client:
    desc: start reactjs server from frontend services (backend services should be running)
    cmds:
      - cd frontend && npm run dev

  k-cluster:
    desc: check info for cluster of kafka brokers
    cmds:
      - cd backend/kafka && docker-compose exec talkverse-kafka-0 kafka-metadata-quorum.sh --bootstrap-server talkverse-kafka-0:9092 describe --status
      - cd backend/kafka && docker-compose exec talkverse-kafka-0 kafka-metadata-quorum.sh --bootstrap-server talkverse-kafka-0:9092 describe --replication

  kafka-topics:
    desc: Create topics for Kafka Cluster (production) from ./task_scripts/this_create_kafka_topics.sh
    # NOTE: Topic partitions can be changed as per requirement.
    # Default settings for a Kafka cluster with 3 brokers and replication factor of 3.
    env:
      MESSAGE_PARTITIONS: 100
      GPMESSAGE_PARTITIONS: 100
      UNSEENCOUNT_PARTITIONS: 100
    cmds:
      # Windows (Git Bash)
      - bash ./task_scripts/this_create_kafka_topics.sh "talkverse-kafka-0" "3"

  compose-up-backend:
    desc: start backend services using Docker Compose - databases, kafka, servers
    cmds:
      - task: create-networks
      - docker-compose -f ./backend/databases/docker-compose.yml up -d
      - docker-compose -f ./backend/kafka/docker-compose.yml up -d
      - sleep 10 # Wait for 10 seconds after starting the brokers
      - task: kafka-topics
      - docker-compose -f ./backend/golang/docker-compose.yml up -d
      - docker-compose -f ./backend/nodejs/docker-compose.yml up -d

  compose-down-backend:
    desc: stop backend services using Docker Compose - databases, kafka, servers
    cmds:
      - docker-compose -f ./backend/nodejs/docker-compose.yml down
      - docker-compose -f ./backend/golang/docker-compose.yml down
      - docker-compose -f ./backend/kafka/docker-compose.yml down
      - docker-compose -f ./backend/databases/docker-compose.yml down

  compose-up-frontend:
    desc: start frontend services using Docker Compose
    cmds:
      - docker-compose -f ./frontend/docker-compose.yml up -d

  compose-down-frontend:
    desc: stop frontend services using Docker Compose
    cmds:
      - docker-compose -f ./frontend/docker-compose.yml down
